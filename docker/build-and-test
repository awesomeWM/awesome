#!/bin/bash
# A wrapper script used as entrypoint to (re)build and then run the tests.

set -e
set -x

# DEBUG
# find /usr/include -type d | grep lua
# find /usr/lib -type d | grep lua
# env | grep -i lua

# Create a user based on AWESOME_UID, which is supposed to be the user's id.
# This might get drooped after having moved to named volumed already?!
if [ -n "$AWESOME_UID" ]; then
  USER=${USER:-awesome}
  echo "Creating user ${USER} with UID $AWESOME_UID.."
  adduser -D -s /bin/bash -u "$AWESOME_UID" "${USER}"

  chown "$AWESOME_UID" /src/awesome/build

  if [ -n "$CCACHE_DIR" ] && [ -d "$CCACHE_DIR" ]; then
    chown "$AWESOME_UID" "$CCACHE_DIR"
  fi

  # Re-execute this script without the user management.
  unset AWESOME_UID
  exec su "$USER" -c "$0 $*"
fi

echo "Running build-and-test: LUA_PKG=$LUA_PKG DO_COVERAGE=$DO_COVERAGE"

# XXX: should get moved into building (as ARG (and ENV)?!)
if [ "$LUA_PKG" = luajit ]; then
  export CMAKE_ARGS='-DLUA_INCLUDE_DIR=/usr/include/luajit-2.1 -DLUA_LIBRARY=/usr/lib/libluajit-5.1.so'
fi

if [ "$DO_COVERAGE" = "codecov" ]; then
  # export CXXFLAGS="-fprofile-arcs -ftest-coverage"
  export CFLAGS="-fprofile-arcs -ftest-coverage"
  export LDFLAFS="-fprofile-arcs -ftest-coverage"
fi

make
build/awesome --version

if [ -n "$DO_COVERAGE" ]; then
  # Use separate assignment, so that "set -e" exits when luarocks is not found.
  luarocks_paths="$(luarocks path --bin)"
  eval "$luarocks_paths"

  # Source: https://github.com/travis-ci/travis-build/blob/ba5abcec10e5a3c7d31d3e1afd0dc7f48a6162ab/lib/travis/build/templates/header.sh
  travis_retry() {
    ANSI_RED="\033[31;1m"
    # ANSI_GREEN="\033[32;1m"
    # ANSI_YELLOW="\033[33;1m"
    ANSI_RESET="\033[0m"
    # ANSI_CLEAR="\033[0K"

    local result=0
    local count=1
    while [ $count -le 3 ]; do
      [ $result -ne 0 ] && {
        echo -e "\n${ANSI_RED}The command \"$@\" failed. Retrying, $count of 3.${ANSI_RESET}\n" >&2
      }
      "$@"
      result=$?
      [ $result -eq 0 ] && break
      count=$(($count + 1))
      sleep 1
    done
    [ $count -gt 3 ] && {
      echo -e "\n${ANSI_RED}The command \"$@\" failed 3 times.${ANSI_RESET}\n" >&2
    }
    return $result
  }

  do_codecov() {
    echo "== do_codecov in $PWD: $*: build/luacov.stats.out: =="
    if [ "$DO_COVERAGE" = "codecov" ]; then
      test -f build/luacov.stats.out || { echo 'build/luacov.stats.out does not exist.'; return 1; }
      luacov || return 1
      travis_retry bash /tmp/codecov-bash -X gcov -X coveragepy -f ./build/luacov.report.out -F "$1" || return 1
      rm build/luacov.stats.out
    fi
    return 0
  }
  do_codecov_gcov() {
    echo "== do_codecov_gcov in $PWD: $*: =="
    if [ "$DO_COVERAGE" = "codecov" ]; then
      (cd build \
        && travis_retry bash /tmp/codecov-bash -X coveragepy -F "$1") || return 1
    fi
    return 0
  }

  # travis_fold_start "DO_COVERAGE"

  # Run tests/examples explicitly.
  # shellcheck disable=SC2086
  (mkdir -p build/examples \
    && cd build/examples \
    && cmake $CMAKE_ARGS ../../tests/examples)
  do_codecov samples

  make check-unit-coverage
  do_codecov unittests
  # TODO: "make check-integration"?!
  # shellcheck disable=SC2086
  tests/run.sh "$@"
  do_codecov functionaltests
  # shellcheck disable=SC2046
  do_codecov_gcov c_code

  # travis_fold_end
else
  # travis_run_in_fold "make.check-unit" make check-unit
  # travis_run_in_fold "make.check-integration" make check-integration
  make check-unit
  # TODO: respect TEST_RUN_ARGS
  make check-integration
fi
